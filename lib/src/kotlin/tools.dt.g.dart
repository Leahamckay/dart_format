 import "dotlin/dotlin_tools.dt.g.dart" show DotlinTools$Companion;
 import "package:dotlin/src/kotlin/library.dt.g.dart" show SafeStringPlus;
 import "package:dotlin/src/kotlin/ranges/ranges_ext.dt.g.dart" show IntRangeFactoryExt;
 import "package:dotlin/src/dotlin/intrinsics/internal.dt.g.dart" show $Return;
 import "dart_format_exception.dt.g.dart" show DartFormatException;
 import "package:dotlin/src/kotlin/ranges/ranges.dt.g.dart" show IntRange;
 import "package:meta/meta.dart" ;
@sealed class Tools{ static const Tools$Companion  $companion = Tools$Companion.$instance; static bool isWhitespace(String c)=> Tools$Companion.$instance.$isWhitespace(c); static bool isClosingBracket(String c)=> Tools$Companion.$instance.$isClosingBracket(c); static bool isOpeningBracket(String c)=> Tools$Companion.$instance.$isOpeningBracket(c); static String _toDisplayString1(String s)=> Tools$Companion.$instance._$toDisplayString1(s); static String toDisplayString2(String s)=> Tools$Companion.$instance.$toDisplayString2(s); static String _stringsToDisplayString1(List<String> strings)=> Tools$Companion.$instance._$stringsToDisplayString1(strings); static String stringsToDisplayString2(List<String> strings)=> Tools$Companion.$instance.$stringsToDisplayString2(strings); static String getOpeningBracket(String closingBracket)=> Tools$Companion.$instance.$getOpeningBracket(closingBracket);}
@sealed class Tools$Companion{ const  Tools$Companion._() : super();@nonVirtual bool $isWhitespace(String c){return DotlinTools$Companion.$instance.$contains("\n\r\t ", c);}@nonVirtual bool $isClosingBracket(String c){return DotlinTools$Companion.$instance.$contains("})]", c);}@nonVirtual bool $isOpeningBracket(String c){return DotlinTools$Companion.$instance.$contains("{([", c);}@nonVirtual String _$toDisplayString1(String s){return DotlinTools$Companion.$instance.$replace(DotlinTools$Companion.$instance.$replace(s, "\r", "\\r"), "\n", "\\n");}@nonVirtual String $toDisplayString2(String s){return "\"" + this._$toDisplayString1(s) + "\"";}@nonVirtual String _$stringsToDisplayString1(List<String> strings){ String  result = "";for ( int  i = 0; i < strings.length; i += 1) result += this._$toDisplayString1(strings[i]);return result;}@nonVirtual String $stringsToDisplayString2(List<String> strings){return "[" + this._$stringsToDisplayString1(strings) + "]";}@nonVirtual String $getOpeningBracket(String closingBracket){try {final String  tmp0_subject = closingBracket;if (tmp0_subject == "}"){throw const $Return<String>("{", -1475888898);}else if (tmp0_subject == ")"){throw const $Return<String>("(", -1475888898);}else if (tmp0_subject == "]"){throw const $Return<String>("[", -1475888898);}else {throw DartFormatException("Unexpected closing bracket: ${closingBracket}");}}on $Return<String> catch (tmp0_return){if (tmp0_return.target == -1475888898){return tmp0_return.value;}else {throw tmp0_return;}} } static const Tools$Companion  $instance = const Tools$Companion._();}