 import "dotlin/dotlin_char.dt.g.dart" show DotlinChar;
 import "package:meta/meta.dart" ;
@sealed class Constants{ static final Constants$Companion  $companion = Constants$Companion.$instance; static const String  OPENING_CURLY_BRACKET = "{"; static const String  CLOSING_CURLY_BRACKET = "}"; static const String  OPENING_ROUND_BRACKET = "("; static const String  CLOSING_ROUND_BRACKET = ")"; static const String  OPENING_SQUARE_BRACKET = "["; static const String  CLOSING_SQUARE_BRACKET = "]"; static const String  ARROW = "=>"; static final DotlinChar  COLON = Constants$Companion.$instance.$COLON; static final DotlinChar  COMMA = Constants$Companion.$instance.$COMMA; static final DotlinChar  EQUAL = Constants$Companion.$instance.$EQUAL; static final DotlinChar  GREATER_THAN = Constants$Companion.$instance.$GREATER_THAN; static final DotlinChar  PERIOD = Constants$Companion.$instance.$PERIOD; static final DotlinChar  SEMICOLON = Constants$Companion.$instance.$SEMICOLON;}
@sealed class Constants$Companion{  Constants$Companion._() : super();@nonVirtual final String  $OPENING_CURLY_BRACKET = "{";@nonVirtual final String  $CLOSING_CURLY_BRACKET = "}";@nonVirtual final String  $OPENING_ROUND_BRACKET = "(";@nonVirtual final String  $CLOSING_ROUND_BRACKET = ")";@nonVirtual final String  $OPENING_SQUARE_BRACKET = "[";@nonVirtual final String  $CLOSING_SQUARE_BRACKET = "]";@nonVirtual final String  $ARROW = "=>";@nonVirtual final DotlinChar  $COLON = DotlinChar(":");@nonVirtual final DotlinChar  $COMMA = DotlinChar(",");@nonVirtual final DotlinChar  $EQUAL = DotlinChar("=");@nonVirtual final DotlinChar  $GREATER_THAN = DotlinChar(">");@nonVirtual final DotlinChar  $PERIOD = DotlinChar(".");@nonVirtual final DotlinChar  $SEMICOLON = DotlinChar(";"); static final Constants$Companion  $instance = Constants$Companion._();}